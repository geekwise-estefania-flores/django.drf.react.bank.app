{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './messages';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_FAIL, REGISTER_SUCCESS } from './types'; // Check token & load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  }); // Get token from state\n\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // If token add to headers config\n\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n\n  axios.get('https://django-drf-react-bank-project.herokuapp.com//users/api/auth/user', config).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Login user\n\nexport const login = (username, password) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request Body \n\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  axios.post('https://django-drf-react-bank-project.herokuapp.com//users/api/auth/login', body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    alert(err.response.data.non_field_errors);\n  });\n}; // Register new user\n\nexport const register = ({\n  username,\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request Body \n\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  });\n  axios.post('https://django-drf-react-bank-project.herokuapp.com//users/api/auth/register', body, config).then(res => {\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    alert(\"You have successfully registered an account. Please login.\");\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    alert(err.response.data.username);\n  });\n}; // Logout user\n\nexport const logout = () => (dispatch, getState) => {\n  // Get token from state\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // If token add to headers config\n\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n\n  axios.post('https://django-drf-react-bank-project.herokuapp.com//users/api/auth/logout', null, config).then(res => {\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n  });\n};","map":{"version":3,"sources":["/Users/stefi/projects/six_degrees/drf-bank/frontend/src/actions/auth.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_FAIL","REGISTER_SUCCESS","loadUser","dispatch","getState","type","token","auth","config","headers","get","then","res","payload","data","catch","err","response","status","login","username","password","body","JSON","stringify","post","alert","non_field_errors","register","email","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './messages';\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_FAIL,\n    REGISTER_SUCCESS\n}\nfrom './types';\n// Check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n    // User loading\n    dispatch({ type: USER_LOADING });\n    // Get token from state\n    const token = getState().auth.token;\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    // If token add to headers config\n    if(token) {\n        config.headers['Authorization'] = `Token ${token}`;\n    }\n    axios\n      .get('https://django-drf-react-bank-project.herokuapp.com//users/api/auth/user', config)\n      .then(res => {\n          dispatch({\n            type: USER_LOADED,\n            payload: res.data\n          });\n      })\n      .catch(err => {\n          dispatch(returnErrors(err.response.data, err.response.status));\n          dispatch({\n              type: AUTH_ERROR\n          });\n      });\n};\n// Login user\nexport const login = (username, password) => dispatch => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    // Request Body \n    const body = JSON.stringify({ username, password });\n    axios\n      .post('https://django-drf-react-bank-project.herokuapp.com//users/api/auth/login', body, config)\n      .then(res => {\n          dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n          });\n      })\n      .catch(err => {\n          dispatch(returnErrors(err.response.data, err.response.status));\n          dispatch({\n              type: LOGIN_FAIL\n          });\n          alert(err.response.data.non_field_errors);\n      });\n};\n// Register new user\nexport const register = ({ username, email, password }) => dispatch => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    // Request Body \n    const body = JSON.stringify({ username, email, password });\n    axios\n      .post('https://django-drf-react-bank-project.herokuapp.com//users/api/auth/register', body, config)\n      .then(res => {\n          dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n          });\n          alert(\"You have successfully registered an account. Please login.\");\n      })\n      .catch(err => {\n          dispatch(returnErrors(err.response.data, err.response.status));\n          dispatch({\n              type: REGISTER_FAIL\n          });\n          alert(err.response.data.username);\n      });\n};\n// Logout user\nexport const logout = () => (dispatch, getState) => {\n    // Get token from state\n    const token = getState().auth.token;\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    // If token add to headers config\n    if(token) {\n        config.headers['Authorization'] = `Token ${token}`;\n    }\n    axios\n      .post('https://django-drf-react-bank-project.herokuapp.com//users/api/auth/logout', null, config)\n      .then(res => {\n          dispatch({\n            type: LOGOUT_SUCCESS,\n          });\n      })\n      .catch(err => {\n          dispatch(returnErrors(err.response.data, err.response.status));\n      });\n};\n"]},"metadata":{},"sourceType":"module"}